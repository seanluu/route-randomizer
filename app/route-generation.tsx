import { useState, useEffect } from 'react';
import { useCurrentLocation } from '@/hooks';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  ScrollView,
  Alert,
  ActivityIndicator,
  Linking,
  Share,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { LinearGradient } from 'expo-linear-gradient';
import { Ionicons } from '@expo/vector-icons';
import { router, useLocalSearchParams } from 'expo-router';

import { locationService } from '@/services/LocationService';
import { routeGenerationService } from '@/services/RouteGenerationService';
import { databaseService } from '@/services/DatabaseService';
import { Route, getDifficultyColor, getSafetyColor, formatDate } from '@/utils';
import { usePreferences } from '@/context/AppContext';
import { DEFAULT_WEATHER, DEFAULT_USER_PREFERENCES } from '@/constants';
import { RouteMap } from '@/components/RouteMap';
import { card, button } from '@/styles/common';

export default function RouteGenerationScreen() {
  const params = useLocalSearchParams();
  
  const selectedDistance = parseFloat(params.selectedDistance as string) || 1609;
  const weather = params.weather ? JSON.parse(params.weather as string) : DEFAULT_WEATHER;
  const userPreferences = params.userPreferences ? JSON.parse(params.userPreferences as string) : DEFAULT_USER_PREFERENCES;
  const existingRoute = params.route ? JSON.parse(params.route as string) : null;
  const isViewingHistory = params.isViewingHistory === 'true';
  
  const [generatedRoute, setGeneratedRoute] = useState<Route | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  
  const { currentLocation, isLoading: isLocating, error: locationError, fetchLocation } = useCurrentLocation();
  const { units } = usePreferences();

  const isCompleted = !!generatedRoute?.walkedAt;
  const canShowRoute = generatedRoute?.name && generatedRoute?.points?.length > 0;

  useEffect(() => {
    fetchLocation();
  }, []);

  useEffect(() => {
    if (isViewingHistory && existingRoute) {
      setGeneratedRoute({
        ...existingRoute,
        createdAt: new Date(existingRoute.createdAt),
        walkedAt: existingRoute.walkedAt ? new Date(existingRoute.walkedAt) : undefined,
      } as Route);
    }
  }, [isViewingHistory, existingRoute]);

  const requestRoute = async () => {
    if (!currentLocation || isGenerating) return;
    
    setIsGenerating(true);
    try {
      const route = await routeGenerationService.generateRoute({
        startLocation: currentLocation,
        distance: selectedDistance,
        preferences: userPreferences,
        weatherConditions: weather,
      });
      
      if (!route) throw new Error('Route generation failed');
      await databaseService.saveRoute(route);
      setGeneratedRoute(route);
    } catch {
      Alert.alert('Route Generation Failed', 'Unable to find a suitable walking route.');
    } finally {
      setIsGenerating(false);
    }
  };

  useEffect(() => {
    if (!isViewingHistory && currentLocation && !generatedRoute) {
      requestRoute();
    }
  }, [currentLocation, isViewingHistory, generatedRoute]);

  const markAsCompleted = async () => {
    if (!generatedRoute) return;
    
    try {
      await databaseService.markRouteAsWalked(generatedRoute.id);
      setGeneratedRoute({ ...generatedRoute, walkedAt: new Date() });
      Alert.alert('Route Completed!', 'Great job!');
    } catch {
      Alert.alert('Error', 'Failed to mark route as completed.');
    }
  };

  const generateDifferentRoute = () => {
    if (!currentLocation || isGenerating) return;
    setGeneratedRoute(null);
    requestRoute();
  };

  const startNavigation = async () => {
    if (!generatedRoute) {
      Alert.alert('Error', 'No route available.');
      return;
    }
  
    const endCoords = `${generatedRoute.endLocation.latitude},${generatedRoute.endLocation.longitude}`;
    const url = `https://www.google.com/maps/dir/?api=1&destination=${endCoords}&travelmode=walking`;
  
    try {
      await Linking.openURL(url);
    } catch {
      Alert.alert('Navigation Error', 'Unable to open Google Maps.');
    }
  };

  const shareRoute = () => {
    if (!generatedRoute) return;
    
    const shareMessage = `Check out this walking route: ${generatedRoute.name}\n\nDistance: ${locationService.formatDistance(generatedRoute.distance, units)}\nDuration: ${locationService.formatDuration(generatedRoute.duration)}\n\nGenerated by Route Randomizer`;
    
    Share.share({ message: shareMessage, title: generatedRoute.name });
  };

  if (isLocating) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.centeredContainer}>
          <ActivityIndicator size="large" color="#4A90E2" />
          <Text style={styles.loadingText}>Getting your location...</Text>
        </View>
      </SafeAreaView>
    );
  }

  if (locationError) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.centeredContainer}>
          <Text style={styles.errorTitle}>Location Error</Text>
          <Text style={styles.errorMessage}>{locationError}</Text>
          <TouchableOpacity style={styles.retryButton} onPress={fetchLocation}>
            <Text style={styles.retryButtonText}>Try Again</Text>
          </TouchableOpacity>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>
        <View style={styles.header}>
          <TouchableOpacity style={styles.backButton} onPress={() => router.back()}>
            <Ionicons name="arrow-back" size={24} color="#4A90E2" />
          </TouchableOpacity>
          <Text style={styles.title}>
            {isViewingHistory ? 'Route Details' : 'Generating Route'}
          </Text>
        </View>

        {isGenerating && (
          <View style={styles.generationStatus}>
            <LinearGradient
              colors={['#4A90E2', '#357ABD']}
              style={styles.generationStatusGradient}
            >
              <ActivityIndicator size="large" color="#fff" />
              <Text style={styles.generationStatusText}>
                Creating your perfect route...
              </Text>
            </LinearGradient>
          </View>
        )}

        <RouteMap
          route={generatedRoute}
          currentLocation={currentLocation}
          style={styles.mapContainer}
        />

        {canShowRoute && (
          <>
            <View style={styles.routeInfo}>
              <Text style={styles.routeName}>{generatedRoute!.name}</Text>
              <Text style={styles.routeDate}>
                Created on {formatDate(generatedRoute!.createdAt)}
              </Text>
            </View>

            <View style={styles.statsGrid}>
              <View style={styles.statCard}>
                <Ionicons name="map" size={24} color="#4A90E2" />
                <Text style={styles.statValue}>
                  {locationService.formatDistance(generatedRoute!.distance, units)}
                </Text>
                <Text style={styles.statLabel}>Distance</Text>
              </View>
              
              <View style={styles.statCard}>
                <Ionicons name="time-outline" size={24} color="#4A90E2" />
                <Text style={styles.statValue}>
                  {locationService.formatDuration(generatedRoute!.duration)}
                </Text>
                <Text style={styles.statLabel}>Duration</Text>
              </View>

              <View style={styles.statCard}>
                <Ionicons name="trending-up" size={24} color={getDifficultyColor(generatedRoute!.difficulty)} />
                <Text style={styles.statValue}>{generatedRoute!.difficulty.toUpperCase()}</Text>
                <Text style={styles.statLabel}>Difficulty</Text>
              </View>

              <View style={styles.statCard}>
                <Ionicons name="shield-checkmark" size={24} color={getSafetyColor(generatedRoute!.safetyScore)} />
                <Text style={styles.statValue}>{generatedRoute!.safetyScore}%</Text>
                <Text style={styles.statLabel}>Safety</Text>
              </View>
            </View>

            <View style={styles.actionButtons}>
              <TouchableOpacity style={styles.secondaryButton} onPress={shareRoute}>
                <Ionicons name="share" size={20} color="#4A90E2" />
                <Text style={styles.secondaryButtonText}>Share</Text>
              </TouchableOpacity>

              <TouchableOpacity
                style={styles.secondaryButton}
                onPress={isCompleted ? undefined : markAsCompleted}
                disabled={isCompleted}
              >
                <Ionicons name="checkmark-circle" size={20} color={isCompleted ? "#4CAF50" : "#4A90E2"} />
                <Text style={[styles.secondaryButtonText, { color: isCompleted ? "#4CAF50" : "#4A90E2" }]}>
                  {isCompleted ? 'Completed' : 'Mark Complete'}
                </Text>
              </TouchableOpacity>
            </View>

            <TouchableOpacity
              style={[styles.mainButton, styles.navigationButton]}
              onPress={startNavigation}
            >
              <Ionicons name="navigate" size={24} color="#fff" />
              <Text style={styles.mainButtonText}>Start Navigation</Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={[styles.mainButton, styles.greenButton]}
              onPress={() => router.back()}
            >
              <Ionicons name="home" size={20} color="#fff" />
              <Text style={styles.mainButtonText}>Save & Go Home</Text>
            </TouchableOpacity>
          </>
        )}

        {!isGenerating && canShowRoute && (
          <TouchableOpacity
            style={[styles.mainButton, styles.redButton, styles.regenerateButton]}
            onPress={generateDifferentRoute}
          >
            <Ionicons name="refresh" size={24} color="#fff" />
            <Text style={styles.mainButtonText}>Generate Different Route</Text>
          </TouchableOpacity>
        )}
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  scrollView: {
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 20,
    paddingBottom: 10,
  },
  backButton: {
    padding: 8,
  },
  title: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333',
    flex: 1,
    textAlign: 'center',
    marginRight: 40,
  },
  generationStatus: {
    marginHorizontal: 20,
    borderRadius: 16,
    overflow: 'hidden',
    elevation: 3,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  generationStatusGradient: {
    padding: 30,
    alignItems: 'center',
  },
  generationStatusText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: 'bold',
    marginTop: 15,
  },
  mapContainer: {
    ...card,
  },
  routeInfo: {
    padding: 15,
  },
  routeName: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#333',
  },
  routeDate: {
    fontSize: 14,
    color: '#666',
  },
  statsGrid: {
    flexDirection: 'row',
    padding: 15,
    justifyContent: 'space-between',
  },
  statCard: {
    flex: 1,
    padding: 12,
    marginHorizontal: 2,
    alignItems: 'center',
    backgroundColor: '#fff',
    borderRadius: 12,
    elevation: 3,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  statValue: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
  },
  statLabel: {
    fontSize: 12,
    color: '#666',
  },
  actionButtons: {
    flexDirection: 'row',
    padding: 15,
    marginTop: -15,
    gap: 8,
  },
  secondaryButton: {
    flex: 1,
    ...button,
    backgroundColor: '#f8f9fa',
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#e9ecef',
  },
  secondaryButtonText: {
    color: '#4A90E2',
    fontSize: 14,
    fontWeight: '600',
    marginLeft: 5,
  },
  mainButton: {
    ...button,
    marginTop: 15,
    marginHorizontal: 20,
  },
  mainButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
    marginLeft: 8,
  },
  navigationButton: {
    backgroundColor: '#4A90E2',
  },
  redButton: {
    backgroundColor: '#FF6B6B',
  },
  greenButton: {
    backgroundColor: '#4CAF50',
  },
  regenerateButton: {
    marginBottom: 15,
  },
  centeredContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 32,
  },
  loadingText: {
    fontSize: 16,
    color: '#555',
    marginTop: 16,
  },
  errorTitle: {
    fontSize: 18,
    color: '#F44336',
    fontWeight: 'bold',
    marginBottom: 16,
  },
  errorMessage: {
    fontSize: 16,
    color: '#555',
    marginBottom: 24,
  },
  retryButton: {
    backgroundColor: '#4A90E2',
    paddingHorizontal: 32,
    paddingVertical: 12,
    borderRadius: 8,
  },
  retryButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
});
